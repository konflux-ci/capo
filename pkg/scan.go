package capo

import (
	"log"
	"os"
	"path"

	"capo/internal/sbom"
	"capo/pkg/content"
	"capo/pkg/includer"

	"go.podman.io/storage"
)

/*
Returns a BuilderImage instance, that contains paths to SBOMs for the specified builder's
builder content and intermediate content generated by Syft.

Only syft scans content that needs to be included based on the copyMask.

Creates a subdirectory in the output directory with the name of the builder's alias.
It then scans the content and stores the respective SBOMs to the subdirectory. All paths are
saved in the returned BuilderImage struct.
Example paths: (output/builder/builder.alias/builder.json and output/builder/builder.alias/intermediate.json)

Users should use the paths in the returned struct to access the SBOMs.
*/
func Scan(store storage.Store, output string, builderStage includer.StageData, includer includer.Includer) (BuilderImage, error) {
	dest := path.Join(output, "builder", builderStage.Alias())
	if err := os.MkdirAll(dest, 0755); err != nil {
		return BuilderImage{}, err
	}

	tmpDir, err := os.MkdirTemp("", "")
	if err != nil {
		return BuilderImage{}, err
	}
	defer os.RemoveAll(tmpDir)

	cnt, err := content.GetContent(store, builderStage.Pullspec(), includer, tmpDir)
	if err != nil {
		return BuilderImage{}, err
	}

	iSbomPath := ""
	if cnt.IntermediatePath != "" {
		log.Printf("Builder \"%s\" intermediate diff path: %s", builderStage.Alias(), cnt.IntermediatePath)
		iSbomPath = path.Join(dest, "intermediate.json")
		if err := sbom.SyftScan(cnt.IntermediatePath, iSbomPath); err != nil {
			return BuilderImage{}, err
		}
	}

	bSbomPath := path.Join(dest, "builder.json")
	log.Printf("Builder \"%s\" content path: %s", builderStage.Alias(), cnt.BuilderPath)
	if err := sbom.SyftScan(cnt.BuilderPath, bSbomPath); err != nil {
		return BuilderImage{}, err
	}

	return BuilderImage{
		Pullspec:         builderStage.Pullspec(),
		IntermediateSBOM: iSbomPath,
		BuilderSBOM:      bSbomPath,
	}, nil
}
