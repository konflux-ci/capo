package capo

import (
	"log"
	"os"
	"path"
	"regexp"

	"capo/internal/sbom"
	"capo/pkg/content"
	"capo/pkg/stage"

	"go.podman.io/storage"
)

/*
Returns a ScanResult instance, that contains paths to SBOMs
for the specified builder's builder content and intermediate content
generated by Syft.

Only syft scans content that needs to be included based on the includer.

Scans the content and stores the respective SBOMs directly to the output directory
using sanitized pullspec names with suffixes. All paths are saved in the returned
BuilderScanResult struct.

Example filenames: docker.io_library_fedora_latest-builder.json and
docker.io_library_fedora_latest-intermediate.json
*/
func Scan(
	store storage.Store,
	stage stage.Stage,
	output string,
) (ScanResult, error) {
	if err := os.MkdirAll(output, 0755); err != nil {
		return ScanResult{}, err
	}

	builderContentPath, err := os.MkdirTemp("", "")
	if err != nil {
		return ScanResult{}, err
	}

	intermediateContentPath, err := os.MkdirTemp("", "")
	if err != nil {
		return ScanResult{}, err
	}

	// if in debug mode, print the paths to saved content
	// and don't remove the temporary directories
	debugMode := os.Getenv("CAPO_DEBUG") != ""
	if debugMode {
		log.Printf("[DEBUG] Builder content path: %s", builderContentPath)
		log.Printf("[DEBUG] Intermediate content path: %s", intermediateContentPath)
	} else {
		defer os.RemoveAll(builderContentPath)
		defer os.RemoveAll(intermediateContentPath)
	}

	err = content.GetContent(store, stage, builderContentPath, intermediateContentPath)
	if err != nil {
		return ScanResult{}, err
	}

	log.Printf("Builder \"%s\" intermediate diff path: %s", stage.Pullspec(), intermediateContentPath)
	iSbomFilename := sanitizePullspec(stage.Pullspec()) + "-intermediate.json"
	iSbomPath := path.Join(output, iSbomFilename)
	if err := sbom.SyftScan(intermediateContentPath, iSbomPath); err != nil {
		return ScanResult{}, err
	}

	bSbomFilename := sanitizePullspec(stage.Pullspec()) + "-builder.json"
	bSbomPath := path.Join(output, bSbomFilename)
	log.Printf("Builder \"%s\" content path: %s", stage.Pullspec(), builderContentPath)
	if err := sbom.SyftScan(builderContentPath, bSbomPath); err != nil {
		return ScanResult{}, err
	}

	return ScanResult{
		Pullspec:         stage.Pullspec(),
		IntermediateSBOM: iSbomFilename,
		BuilderSBOM:      bSbomFilename,
	}, nil
}

// Sanitize a pullspec so it can be used as a file path
func sanitizePullspec(pullspec string) string {
	// replace invalid filesystem characters with underscores
	invalidChars := regexp.MustCompile(`[/\\:*?"<>|]`)
	result := invalidChars.ReplaceAllString(pullspec, "_")

	// replace consecutive underscores with single underscore
	result = regexp.MustCompile(`_+`).ReplaceAllString(result, "_")

	return result
}
