package capo

import (
	"log"
	"os"
	"path"
	"regexp"

	"capo/internal/sbom"
	"capo/pkg/content"
	"capo/pkg/includer"

	"go.podman.io/storage"
)

/*
Returns a BuilderScanResult instance, that contains paths to SBOMs
for the specified builder's builder content and intermediate content
generated by Syft.

Only syft scans content that needs to be included based on the includer.

Scans the content and stores the respective SBOMs directly to the output directory
using sanitized pullspec names with suffixes. All paths are saved in the returned
BuilderScanResult struct.

Example filenames: docker.io_library_fedora_latest-builder.json and
docker.io_library_fedora_latest-intermediate.json
*/
func ScanBuilder(
	store storage.Store,
	builderStage includer.Stage,
	includer includer.Includer,
	output string,
) (BuilderScanResult, error) {
	if err := os.MkdirAll(output, 0755); err != nil {
		return BuilderScanResult{}, err
	}

	builderContentPath, err := os.MkdirTemp("", "")
	if err != nil {
		return BuilderScanResult{}, err
	}
	defer os.RemoveAll(builderContentPath)

	intermediateContentPath, err := os.MkdirTemp("", "")
	if err != nil {
		return BuilderScanResult{}, err
	}
	defer os.RemoveAll(builderContentPath)

	err = content.GetBuilderContent(store, builderStage.Pullspec(), includer, builderContentPath, intermediateContentPath)
	if err != nil {
		return BuilderScanResult{}, err
	}

	log.Printf("Builder \"%s\" intermediate diff path: %s", builderStage.Alias(), intermediateContentPath)
	iSbomFilename := sanitizePullspec(builderStage.Pullspec()) + "-intermediate.json"
	iSbomPath := path.Join(output, iSbomFilename)
	if err := sbom.SyftScan(intermediateContentPath, iSbomPath); err != nil {
		return BuilderScanResult{}, err
	}

	bSbomFilename := sanitizePullspec(builderStage.Pullspec()) + "-builder.json"
	bSbomPath := path.Join(output, bSbomFilename)
	log.Printf("Builder \"%s\" content path: %s", builderStage.Alias(), builderContentPath)
	if err := sbom.SyftScan(builderContentPath, bSbomPath); err != nil {
		return BuilderScanResult{}, err
	}

	return BuilderScanResult{
		Pullspec:         builderStage.Pullspec(),
		IntermediateSBOM: iSbomFilename,
		BuilderSBOM:      bSbomFilename,
	}, nil
}

func ScanExternal(
	store storage.Store,
	externalStage includer.Stage,
	includer includer.Includer,
	output string,
) (ExternalScanResult, error) {
	if err := os.MkdirAll(output, 0755); err != nil {
		return ExternalScanResult{}, err
	}

	externalContentPath, err := os.MkdirTemp("", "")
	if err != nil {
		return ExternalScanResult{}, err
	}
	defer os.RemoveAll(externalContentPath)

	err = content.GetExternalContent(
		store, externalStage.Pullspec(), includer, externalContentPath,
	)
	if err != nil {
		return ExternalScanResult{}, err
	}

	eSbomFilename := sanitizePullspec(externalStage.Pullspec()) + "-external.json"
	eSbomPath := path.Join(output, eSbomFilename)
	log.Printf("External \"%s\" content path: %s", externalStage.Pullspec(), externalContentPath)
	if err := sbom.SyftScan(externalContentPath, eSbomPath); err != nil {
		return ExternalScanResult{}, err
	}

	return ExternalScanResult{
		Pullspec: externalStage.Pullspec(),
		SBOM:     eSbomFilename,
	}, nil
}

// Sanitize a pullspec so it can be used as a file path
func sanitizePullspec(pullspec string) string {
	// replace invalid filesystem characters with underscores
	invalidChars := regexp.MustCompile(`[/\\:*?"<>|]`)
	result := invalidChars.ReplaceAllString(pullspec, "_")

	// replace consecutive underscores with single underscore
	result = regexp.MustCompile(`_+`).ReplaceAllString(result, "_")

	return result
}
